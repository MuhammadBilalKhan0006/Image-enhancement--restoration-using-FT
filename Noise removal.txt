% Read the image
A=imread('noise.png');
B=rgb2gray(A);
subplot(3,1,1);
imshow(B),title('original gray');

% Convert the image to the frequency domain
C=fft2(B);

% Shift the zero frequency component to the center
C = fftshift(C);

% Design a low-pass filter using a Gaussian function
sigma = 60; % Standard deviation of the Gaussian function
[M, N] = size(C); % Size of the Fourier transform matrix
[X, Y] = meshgrid(1:N, 1:M); % Create a grid of coordinates
% Calculate the distance of each point from the center
D = sqrt((X - N/2).^2 + (Y - M/2).^2);
% Calculate the mask using the Gaussian function
H = exp(-(D.^2) / (2 * sigma^2));

% Apply the filter to the Fourier transform matrix
G = C .* H;

% Shift back the zero frequency component to the first element
G = ifftshift(G);

% Convert the modified Fourier transform matrix back to the spatial domain
g = ifft2(G);

% Display the original and reconstructed images
subplot(3,1,2);
imshow(log(abs(C)+1),[]); % Use log, abs, and scaling
title('Fourier Transform');

subplot(3,1,3);
imshow(uint8(g)),title('inverse');
